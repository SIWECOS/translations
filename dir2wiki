#!/usr/bin/perl
=head1 NAME

dir2wiki - Push SIWECOS translations to the WIKI

=head1 SYNOPSIS

B<dir2wiki> [B<-v>] [B<--silent>] [B<--dryrun>] [B<--refresh>]

B<dir2wiki> B<--help>|B<--man>

=head1 Description

dir2wiki will take all SIWECOS translations found in a subdirectory
"translations" and "wiki" and push them to the SIWECOS WIKI.

=cut

use strict;
use warnings;
use FindBin qw($Bin $Script);
use File::Basename;
use Getopt::Long qw(:config no_ignore_case);
use Pod::Usage;
use lib "$Bin/lib";
use MediaWiki::API;
use Config::Simplest;
use utf8;

my $EXT='.wiki';

binmode(STDOUT, ':utf8');

=head1 options

=over 4

=cut

my $dryrun = 0;
=item B<--dryrun>

=item B<-d>

Just test the changes.

=cut

my $refresh= 0;
=item B<--refresh>

=item B<-r>

Refresh the pages, so purge the cache.

If given twice, pages are not tested for changes. This will just purge the
caches without updating any pages.

=cut

my $silent= 0;

=item B<--silent>

Suppress output.

=cut

my $verbose= 0;

=item B<-v>

Verbose output.

Will show more output if given twice.

=cut

help() unless GetOptions(
    'verbose+'   => \$verbose,
    'silent'     => \$silent,
    'dryrun'     => \$dryrun,
    'refresh+'   => \$refresh,
    'h|help'     => \&help,
    'm|man'      => \&man,
);

=item B<--help>

short help page

=item B<--man>

show man page

=back

=cut

sub help { pod2usage(-verbose=>1); }
sub man  { pod2usage(-verbose=>2); }

$silent= 0 if $verbose;

my $settings= get_config("$Bin/wiki.conf", qw(API USER PASS));

my $TRANSLATIONS= "$Bin/texts";
my $WIKITEXT= "$Bin/wiki";
my $SCANNER_TEMPLATE= '_WIKI_SCANNER';
my $USE_DEFINITION= '_use';
my $SCANNER_NAME= '_SCANNER_NAME';

##############################################################################
#
# read scanner templates
#
verbose("Reading templates\n");
my %SCANNER_TEMPLATES;
# check for which languages we do have a template
foreach (glob qq("$WIKITEXT/$SCANNER_TEMPLATE/*$EXT")) {
    # extract the language
    my $lang= lc( basename($_, $EXT ) );
    my $text= '';
    # Read the template
    if (open my $file, '<:utf8', $_) {
        $text= do {
            local $/;
            <$file>;
        };
        $text=~ s/[\012Â¯015]+$//;
        close $file;
    } else {
        die "Missing $_.\n";
    }
    $SCANNER_TEMPLATES{$lang}= $text;
}

die "No Scanner Templates in\n\t$WIKITEXT/$SCANNER_TEMPLATE.\n"
    unless %SCANNER_TEMPLATES;

##############################################################################
#
# Read the _use file defining the purposes
#
verbose("Checking required sections\n");
my @PURPOSES= do {
    open my $file, '<:utf8', "$WIKITEXT/$SCANNER_TEMPLATE/$USE_DEFINITION"
        or die "Can't read $WIKITEXT/$SCANNER_TEMPLATE/$USE_DEFINITION: $!\n";
    my $use= do {
        local $/;
        <$file>;
    };
    close $file;
    my %PURPOSES;
    @PURPOSES{grep $_, split /\s+/s, $use} = ();
    ++$PURPOSES{'Link'};
    sort keys %PURPOSES;
};

##############################################################################
#
# Now go through all the scanner texts we have
#
verbose("Reading Test texts\n");
my %test_translations;
my %scanner_names;
my %LANGUAGES;
my $warning;
# get each scanner nickname
foreach my $dir (glob qq("$TRANSLATIONS/*")) {
    next unless -d $dir;
    # Ignore Non-Scanner directories (SIWECOS)
    next unless -d "$dir/$SCANNER_NAME";
    my $scanner= basename $dir;
    info("  $scanner\n");
    # Get the name for the scanner
    my $scanner_name= read_text("$dir/$SCANNER_NAME");
    if (ref $scanner_name) {
        $scanner_names{$scanner}= $scanner_name;
    } else {
        ++$warning;
        warn "$scanner_name\n";
    }
    # get each test nickname
    foreach my $dir (glob("$dir/*")) {
        next unless -d $dir;
        my $test= basename $dir;
        info("    $test\n");
        # Special cases are ignored
        next if $test=~ /^_/;
        foreach my $purpose (@PURPOSES) {
            my $text= read_text("$dir/$purpose");
            if (ref $text) {
                $test_translations{$scanner}{$test}{$purpose}= $text;
            } else {
                ++$warning;
                warn "$text\n";
            }
        }
    }
}

##############################################################################
#
# now read all wiki pages
#
verbose("Reading Wiki texts\n");
my %wikitext;
# get each textname
foreach my $dir (glob qq("$WIKITEXT/*")) {
    next unless -d $dir;
    my $textname= basename $dir;
    # Special cases are ignored
    next if $textname=~ /^_/;
    info("$textname\n");
    foreach my $purpose (qw(link wikitext)) {
        my $text= read_text("$dir/$purpose");
        if (ref $text) {
            $wikitext{$textname}{$purpose}= $text;
        } else {
            ++$warning;
            warn "$text\n";
        }
    }
}

my @LANGUAGES= sort keys %LANGUAGES;

die "Too many errors.\n" if $warning;

##############################################################################
#
# Check missing templates
#
foreach my $lang (@LANGUAGES) {
    next if $SCANNER_TEMPLATES{$lang};
    warn "No template for $lang\n";
    delete $LANGUAGES{$lang};
}
@LANGUAGES= sort keys %LANGUAGES;

die "No template for the languages found.\n" unless @LANGUAGES;

##############################################################################
#
# Check missing translations
#
verbose("Checking Test translations\n");
my @scanners= sort keys %test_translations;
my $count= 0;
my $testcount;
foreach my $scanner (@scanners) {
    # Data structure is
    # test_translations {scanner} -> {test} -> {purpose} -> {language}
    foreach my $test (sort keys %{$test_translations{$scanner}}) {
        ++$testcount;
        foreach my $purpose (@PURPOSES) {
            foreach my $lang (@LANGUAGES) {
                # Did the file for the test exist?
                if (exists $test_translations{$scanner}{$test}{$purpose}{$lang}) {
                    # Was the file empty?
                    if (($test_translations{$scanner}{$test}{$purpose}{$lang}||'') eq '') {
                        ++$warning;
                        warn "No $lang text in $scanner/$test/$purpose\n";
                    } else {
                        ++$count;
                    }
                } else {
                    ++$warning;
                    warn "No $lang translation for $scanner/$test/$purpose\n";
                }
            }
        }
    }
}
verbose("Checking Wiki translations\n");
my $wikicount;
foreach my $textname (sort keys %wikitext) {
    # Data structure is
    # wikitext {textname} -> {purpose} -> {language}
    foreach my $purpose (qw(link wikitext)) {
        ++$wikicount;
        foreach my $lang (@LANGUAGES) {
            # Did the file for the entry exist?
            if (exists $wikitext{$textname}{$purpose}{$lang}) {
                # Was the file empty?
                if (($wikitext{$textname}{$purpose}{$lang}||'') eq '') {
                    ++$warning;
                    warn "No $lang text in $textname/$purpose\n";
                } else {
                    ++$count;
                }
            } else {
                ++$warning;
                warn "No $lang translation for $textname/$purpose\n";
            }
        }
    }
}

die "Too many errors.\n" if $warning;

##############################################################################
#
# log in to the wiki
#
my $mw = MediaWiki::API->new({
    api_url => $settings->{API},
});
$mw->login( { lgname => $settings->{USER}, lgpassword => $settings->{PASS} } )
  || die  $mw->{error}->{details}. ' ('. $mw->{error}->{code} . ')';

##############################################################################
#
# * Check pagenames
# * build template pages
# * prepare and parse subpages
# * collect used categories
#
my (
    %pages,
    %dupcheck,
    %subpages,
    $subpagecount,
    %found_categories,
);
verbose("Parsing pages\n");
foreach my $scanner (@scanners) {
    # Data structure is
    # test_translations {scanner} -> {test} -> {purpose} -> {language}
    foreach my $test (sort keys %{$test_translations{$scanner}}) {
        foreach my $lang (@LANGUAGES) {
            # $location is the path to file.
            my $location= "$TRANSLATIONS/$scanner/$test/Link/$lang$EXT";
            my $pagename= join ("/",
                $test_translations{$scanner}{$test}{Link}{$lang},
                uc $lang);
            if (check_link( \%dupcheck, $pagename, $location, $lang )) {
                $pages{$lang}{$pagename}= $SCANNER_TEMPLATES{$lang};
            } else {
                ++$warning;
            }
            # prepare Category
            # Put _SCANNER_NAME as first line
            # Split at "," into separate lines
            # put "[[Category:" and "]]" around every entry
            # Finally put an "includeonly" around the result
            for ($test_translations{$scanner}{$test}{Category}{$lang}) {
                $_= $scanner_names{$scanner}{$lang} . "\n" . $_;
                s/\s*,\s*/\n/g;
                s/\n\n+/\n/g;                       # delete empty lines
                tr/_/ /;
                my $wiki= '';
                foreach my $cat (split /[\012\015]+/) {
                    $cat=~ s/^\s+|\s+$//g;
                    $wiki.= "[[Category:$cat]]\n";
                    ++$found_categories{$lang}->{$cat};
                }
                $_="<includeonly>\n$wiki</includeonly>";
            }
            foreach my $purpose (@PURPOSES) {
                next if $purpose eq 'Link';
                $location= "$TRANSLATIONS/$scanner/$test/$purpose/$lang$EXT";
                my $subname= join("/", $pagename, $purpose);
                $subpages{$lang}{$subname}= $test_translations{$scanner}{$test}{$purpose}{$lang};
                ++$subpagecount;
                if ($refresh < 2) {
                    my $warningtext= parse_wiki($mw, $subpages{$subname}, $location);
                    if ($warningtext) {
                        info($/);
                        warn $warningtext;
                        info($/);
                    }
                    # Don't count non-existing links. No ++$warning for these
                }
            }
        }
    }
}
foreach my $textname (sort keys %wikitext) {
    # Data structure is
    # wikitext {textname} -> {purpose} -> {language}
    foreach my $lang (@LANGUAGES) {
        # $location is the path to file.
        my $location= "$WIKITEXT/$textname/wikitext/$lang$EXT";
        my $pagename= join ("/",
            $wikitext{$textname}{link}{$lang},
            uc $lang);
        if (check_link( \%dupcheck, $pagename, $location, $lang )) {
            $pages{$lang}{$pagename}= $wikitext{$textname}{wikitext}{$lang};
            if ($refresh < 2) {
                my $warningtext= parse_wiki($mw, $subpages{$pagename}, $location);
                if ($warningtext) {
                    info($/);
                    warn $warningtext;
                    info($/);
                }
                # Don't count non-existing links. No ++$warning for these
            }
        } else {
            ++$warning;
        }
    }
}
#
# When this is done we have
# $testcount Wiki articles for Tests
# $wikicount pure Wiki articles
# $subpagecount wiki (sub-)pages
# Articles are in pages { pagename }
# Subpages are in subpages { subpagename }

if ($warning) {
    $mw->logout();
    die "Too many errors.\n";
}

my %known_categories;
verbose("Fetching categories.\n");
@known_categories{
    map $_->{'*'}, @{$mw->list({
        action => 'query',
        list => 'allcategories',
        format => 'JSON',
    })}
} = ();

if ($dryrun) {
    print "Doing dryrun.";
    print " Will show pages which would be updated or refreshed." unless $silent;
    print "\n";
}

# %count;
# For each language
my %count;
foreach my $lang (@LANGUAGES) {
    $count{$lang}= {
        same => 0,
        changed => 0,
        created => 0,
        pages => 0,
        refreshs => 0,
        refresh => {},
    };
    # Update subpages first
    verbose("Updateing sub $lang pages\n");
    update($subpages{$lang}, $count{$lang});
    $count{$lang}{subpages}= $count{$lang}{pages};
    # Then articles
    verbose("Updateing $lang articles\n");
    update($pages{$lang}, $count{$lang});
    $count{$lang}{articles}= $count{$lang}{pages} - $count{$lang}{subpages};
}

$mw->logout();

exit if $silent;

my %new_categories= ( '*' => {} );
my $found_new= 0;
my $catlen= 0;
foreach my $lang (sort keys %found_categories) {
    $new_categories{$lang}= {};
    foreach my $cat (sort keys %{$found_categories{$lang}}) {
        next if exists $known_categories{$cat};
        ++$new_categories{$lang}->{$cat};
        ++$new_categories{'*'}->{$cat};
        ++$found_new;
        $catlen= length($cat) if length($cat) > $catlen;
    }
}
if ($found_new and ($verbose or $dryrun)) {
    my $catfill= '.' x (2+$catlen);
    print "\nNew categories found:\n";
    foreach my $lang (sort keys %new_categories) {
        next if $lang eq '*';
        foreach my $cat (sort keys %{$new_categories{$lang}}) {
            printf "%-2s %s%s: %4d\n",
                $lang,
                $cat,
                substr($catfill, length($cat)),
                $new_categories{$lang}->{$cat}
            ;
        }
    }
}

print "\nUpdate statistics\n";
my $changed= 0;
my $created= 0;
my $same= 0;
my $junked= 0;
my $pages= 0;
my $subpages= 0;
my $articles= 0;
my $refreshs= 0;
my $langcount= 0;
foreach my $lang (@LANGUAGES) {
    ++$langcount;
    printf "%-2s New categories.....: %4d\n", $lang, scalar keys %{$new_categories{$lang}};
    printf "%-2s Pages created......: %4d\n", $lang, $count{$lang}->{created};
    printf "%-2s Pages updated......: %4d\n", $lang, $count{$lang}->{changed};
    printf "%-2s Pages kept.........: %4d\n", $lang, $count{$lang}->{same};
    printf "%-2s Pages in total.....: %4d\n", $lang, $count{$lang}->{pages};
    printf "%-2s Sub-Pages in total.: %4d\n", $lang, $count{$lang}->{subpages};
    printf "%-2s Articles refreshed.: %4d\n", $lang, $count{$lang}->{refreshs};
    printf "%-2s Articles in total..: %4d\n", $lang, $count{$lang}->{articles};
    $created+=  $count{$lang}->{created};
    $changed+=  $count{$lang}->{changed};
    $same+=     $count{$lang}->{same};
    $refreshs+= $count{$lang}->{refreshs};
    $subpages+= $count{$lang}->{subpages};
    $pages+=    $count{$lang}->{pages};
    $articles+= $count{$lang}->{articles};
}
if ($langcount > 1) {
    printf "   New categories.....: %4d\n", scalar keys %{$new_categories{'*'}};
    printf "   Pages created......: %4d\n", $created;
    printf "   Pages updated......: %4d\n", $changed;
    printf "   Pages kept.........: %4d\n", $same;
    printf "   Pages in total.....: %4d\n", $pages;
    printf "   Sub-Pages in total.: %4d\n", $subpages;
    printf "   Articles refreshed.: %4d\n", $refreshs;
    printf "   Articles in total..: %4d\n", $articles;
}

sub update {
    my ($pages, $statistics)= @_;
    foreach my $pagename (sort keys %$pages) {
        my $changed= 0;
        my $created= 0;
        my $same= 0;
        if ($refresh < 2) {
            # Parse the text / Check for missing links
            my $ref = eval {
                $mw->get_page( { title => $pagename } );
            };
            if ($@) {
                warn "\nError...: $@";
                warn   "Pagename: $pagename\n";
            }
            my $content= $pages->{$pagename};
            ++$statistics->{pages};
            # Check the text whether or not it changed.
            if ( ( $ref->{'*'} || '' ) ne $content ) {
                # If it changed (or is new), count it
                if (exists $ref->{missing}) {
                    ++$created;
                    verbose("C $pagename\n");
                } else {
                    ++$changed;
                    verbose("U $pagename\n");
                }
                if (not $dryrun and not $refresh) {
                    # Update or create the entry
                    my $timestamp = $ref->{timestamp};
                    edit($mw, {
                        action => 'edit',
                        title => $pagename,
                        basetimestamp => $timestamp, # to avoid edit conflicts
                        text => $content,
                    });
                }
            } else {
                # Count the unchanged entries.
                ++$same;
                verbose("= $pagename\n") if $verbose > 1;
            }
        }
        $statistics->{changed}+= $changed;
        $statistics->{created}+= $created;
        $statistics->{same}+=    $same;
        if ($changed or $created or $refresh == 1) {
            my $basename= basename $pagename;
            ++$statistics->{refresh}->{$basename};
        } elsif ($refresh > 1 or $statistics->{refresh}->{$pagename}) {
            print "R $pagename\n" if 1 < $refresh + $verbose;
            ++$statistics->{refreshs};
            if (not $dryrun) {
                $mw->api({
                    action => 'purge',
                    titles => $pagename,
                });
            }
        }
    }
}


sub check_link {
    my($dupcheck, $pagename, $location, $lang)= @_;
    if ($pagename=~ /[\012\015]/) {
        warn "Links must be single lines.\n"
           . "   Check $lang link for $location\n";
        return undef;
    } 
    if ($pagename=~ /[\x00-\x1f]/) {
        warn "Illegal characters in link.\n"
           . "   Check $lang link for $location\n";
        return undef;
    }
    if (exists $dupcheck{lc $pagename}) {
        warn "Duplicate Link $pagename defined\n"
           . "  in  $location\n"
           . "  and ".$dupcheck{lc $pagename}."\n";
        return undef;
    }
    $dupcheck->{lc $pagename}= $location;
    return 1;
}

sub edit {
    my($mw, $action)= @_;
    my $retries= 3;
    while ($retries--) {
        last if $mw->edit( $action );
        if ( 3 != $mw->{error}->{code} && 5 != $mw->{error}->{code} ) {
            warn "Don't know how to handle ''" . $mw->{error}->{details}. "' (". $mw->{error}->{code} . ')';
            exit 1;
        }
        if (1 > $retries) {
            warn "No more retries. Giving up on ''" . $mw->{error}->{details}. "' (". $mw->{error}->{code} . ')';
            exit 2;
        }
        warn "Reconnecting...\n" if $verbose;
        $mw->logout();
        $mw->login( { lgname => $settings->{USER}, lgpassword => $settings->{PASS} } )
          || die  $mw->{error}->{details}. ' ('. $mw->{error}->{code} . ')';
    }
}

sub read_text {
    my($path)= @_;
    return "Missing $path" unless -d $path;
    return "Can't read $path" unless -r $path;
    my $result;
    foreach my $file (glob("$path/??$EXT")) {
        my $lang= lc basename $file, $EXT;
        ++$LANGUAGES{$lang};
        $result||= {};
        open my $in, '<:utf8', $file
            or return "Can't read $file";
        $result->{$lang}= do { local $/; <$in>; };
        close $in;
        for ($result->{$lang}) {
            s/[\012\015]+$//s;
            s/[ \t]+$//gm;
        }
    }
    return $result || "No translations in $path";
}


sub parse_wiki {
    my($mw, $text, $location)= @_;
    my $warnings;
    info("Parsing $location\n");
    my $result= $mw->api({
        action => 'parse',
        format => 'json',
        title => 'none',
        text => $text,
        prop => 'text|links|externallinks',
        disablelimitreport => 'true',
    });
    if( not $result ) {
        die $mw->{error}->{details}. ' ('. $mw->{error}->{code} . ')';
    }
    local($_)= $result->{parse}->{text}->{'*'};
    foreach my $link (@{$result->{parse}->{links}}) {
        my $printable_link= $link->{'*'};
        if (not exists $link->{exists}) {
            $warnings.= "Missing link: $printable_link in $location.\n";
        }
    }
    return $warnings;
}

sub verbose {
    return if $silent;
    return unless $dryrun or $verbose;
    print @_;
}

sub info {
    return if $silent;
    return if $verbose < 2;
    print @_;
}


