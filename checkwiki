#!/usr/bin/perl
=head1 NAME

checkwiki

=head1 SYNOPSIS

B<checkwiki>

B<wiki2lang> B<--help>|B<--man>

=cut

use strict;
use warnings;
use FindBin qw($Bin $Script);
use lib "$Bin/lib";
use MediaWiki::API;
use File::Basename;
use File::Find;
use Getopt::Long qw(:config no_ignore_case);
use Pod::Usage;
use POSIX;
use Config::Simplest;

binmode(STDOUT, ':utf8');

# Location and names of some directories / files
# $Bin = absolute path of this script
# $Script = filename of this script
my $TRANSLATIONS= "$Bin/translations";
my $WIKITEXTS= "$Bin/wiki";
my $settings= get_config("$Bin/wiki.conf", qw(API WIKI USER PASS));

# Get all existing translations
my %existing;
my %structure;
my $existcount= 0;
find( sub {
  # Just count those which have a "Link" or "link" subdirectory
  return unless lc(basename($File::Find::dir)) eq 'link';
  # Get the placeholder (Parent of link directory)
  my $placeholder= basename dirname $File::Find::dir;
  my (
    $in,
    $pagename,
  );
  # Language is the name of the file (EN|DE)
  my $lang= uc $_;
  $lang=~ s/\.[^.]*$//;
  # The file contains the wiki-pagename
  open $in, '<:encoding(utf8)', $File::Find::name;
  $pagename= do { local $/; <$in> };
  close $in;
  for ($pagename) {
    tr/\015\012//d;
    s/^\s+|\s+$//g;
    s/_/ /g;
  }
  if (exists $existing{$pagename}{$lang}) {
    warn "Duplicat page $pagename/$lang\n  for $placeholder\n  and ".$existing{$pagename}{$lang}."\n";
  } else {
    $existing{$pagename}{$lang}= $placeholder;
    ++$existcount;
  }
}, $TRANSLATIONS, $WIKITEXTS);

print "Articles in repository: $existcount\n";

my %found;
my $foundcount= 0;
# log in to the wiki
my $mw = MediaWiki::API->new({
    api_url => $settings->{API},
});
$mw->login( { lgname => $settings->{USER}, lgpassword => $settings->{PASS} } )
  || die  $mw->{error}->{details}. ' ('. $mw->{error}->{code} . ')';

foreach my $page (@{$mw->list( {
    action => 'query',
    list => 'allpages',
    format => 'JSON',
  } )}) {
    my($pagename, $lang, $subpage)= ($page->{title}=~ m#^(.*?)/(DE|EN)\b(?:/(.+))?$#);
    next if not defined $lang;
    if (not defined $subpage) {
      ++$foundcount;
      ++$found{$pagename}{$lang}{'*'};
    } else {
      $subpage=~s/ /_/g;
      ++$found{$pagename}{$lang}{$subpage};
    }
}
$mw->logout();

print "Articles in wiki......: $foundcount\n";

my $err="\nArticles missing in repository:\n";
my %missing_in_repo;
foreach my $article (sort keys %found) {
  foreach my $lang (sort keys %{$found{$article}}) {
    # Skip if the main page does not exist.
    next unless exists $found{$article}{$lang}{'*'};
    next if exists $existing{$article}{$lang};
    ++$missing_in_repo{$article}{$lang};
    print $err, "  $article/$lang\n";
    $err='';
  }
}

$err="\nPages missing in repository:\n";
foreach my $article (sort keys %found) {
  foreach my $lang (sort keys %{$found{$article}}) {
    next if exists $missing_in_repo{$article}{$lang};
    my $fname= lc($lang).".txt";
    my $dir;
    $dir= "$TRANSLATIONS/" . $existing{$article}{$lang} if defined $existing{$article}{$lang};
    foreach my $subpage (sort keys %{$found{$article}{$lang}}) {
      next if $subpage eq '*';
      next if $dir and -r join('/', $dir, $subpage, $fname);
      print $err, "  $article/$lang/$subpage\n";
      $err='';
    }
  }
}

$err="\nArticles missing in Wiki:\n";
my %missing_in_wiki;
foreach my $article (sort keys %existing) {
  foreach my $lang (sort keys %{$existing{$article}}) {
    next if exists $found{$article}{$lang};
    ++$missing_in_wiki{$article}{$lang};
    print $err, "  $article/$lang ",$existing{$article}{$lang},"\n";
    $err='';
  }
}
